<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CreateBucket">
        <intProp name="ThreadGroup.num_threads">10</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Createbucket">
          <stringProp name="HTTPSampler.domain">172.16.23.8</stringProp>
          <stringProp name="HTTPSampler.port">9096</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.path">/ds3m/v1.0/buckets</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;bucket_id&quot;: &quot;${bucket_id}&quot;,&#xd;
  &quot;storage_size&quot;: ${storage_size},&#xd;
  &quot;storage_unit&quot;: &quot;${storage_unit}&quot;,&#xd;
  &quot;access_policy&quot;: &quot;${access_policy}&quot;&#xd;
}&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-api-key</stringProp>
                <stringProp name="Header.value">0987654321</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// Get thread number (0-based) from JMeter context and add 1
int threadNum = ctx.getThreadNum() + 1
vars.put(&quot;bucket_id&quot;, &quot;test&quot; + threadNum)

// Random storage size: 1‚Äì10
vars.put(&quot;storage_size&quot;, (1 + new Random().nextInt(10)).toString())

// Random storage unit
def units = [&quot;KB&quot;, &quot;MB&quot;, &quot;GB&quot;, &quot;TB&quot;]
vars.put(&quot;storage_unit&quot;, units[new Random().nextInt(units.size())])

// Random access policy
def policies = [&quot;private&quot;, &quot;public&quot;]
vars.put(&quot;access_policy&quot;, policies[new Random().nextInt(policies.size())])
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.nio.file.*
import org.apache.jmeter.samplers.SampleResult

// === Log Request and Response ===
def requestBody = sampler.getArguments().getArgument(0).getValue()
def responseCode = prev.getResponseCode()
def responseBody = prev.getResponseDataAsString()

log.info(&quot;REQUEST BODY:\n${requestBody}&quot;)
log.info(&quot;RESPONSE CODE: ${responseCode}&quot;)
log.info(&quot;RESPONSE BODY:\n${responseBody}&quot;)


if (responseCode == &quot;200&quot; || responseCode == &quot;201&quot;) {


    def logMessage = &quot;‚úÖ Created Bucket ID: ${vars.get(&apos;bucket_id&apos;)}&quot;
    log.info(logMessage)

    // Define file path
    def filePath = &quot;/home/pavithra/jmeter/bin/MinIOConsole/createbucket.csv&quot;
    def path = Paths.get(filePath)
    def header = &quot;bucket_id,access_policy,storage_unit,storage_size\n&quot;


    if (!Files.exists(path)) {
        Files.createDirectories(path.getParent())
        Files.write(path, header.getBytes(), StandardOpenOption.CREATE)
        log.info(&quot;üÜï CSV created with header.&quot;)
    }


    def bucket_id = vars.get(&quot;bucket_id&quot;) ?: &quot;&quot;
    def access_policy = vars.get(&quot;access_policy&quot;) ?: &quot;&quot;
    def storage_unit = vars.get(&quot;storage_unit&quot;) ?: &quot;&quot;
    def storage_size = vars.get(&quot;storage_size&quot;) ?: &quot;&quot;

    // Append valid data
    if (bucket_id &amp;&amp; access_policy &amp;&amp; storage_unit &amp;&amp; storage_size) {
        def line = &quot;${bucket_id},${access_policy},${storage_unit},${storage_size}\n&quot;
        Files.write(path, line.getBytes(), StandardOpenOption.APPEND)
        log.info(&quot;üìÑ Bucket data written to CSV.&quot;)
    } else {
        log.warn(&quot;‚ö†Ô∏è Missing bucket values. Skipping CSV write.&quot;)
    }

} else {
    log.warn(&quot;‚ùå Bucket creation failed. Not writing to CSV. Response Code: ${responseCode}, Request Body: ${requestBody}&quot;)
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">C:\Users\User\Desktop\MinIO_LoadTest\undeleted_buckets1.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">bucket_id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
